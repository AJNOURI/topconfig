#!/usr/bin/env python

"""Usage:
  topconfig [-hbr] [ -v | -w ] DEVICE-LIST TFTP SCENARIO
  topconfig --version

           Process router list and parameters from DEVICE-LIST, backup
           configuration files with optional git version control.

Arguments:
  DEVICE-LIST        mendatory YAML input file for router list
  TFTP        TFTP server IP address
  SCENARIO        TFTP Directory from which read config or to which backup the config

Options:
  -h --help   show this
  -b          backup topology (running config to tftp)
  -r          reset topology (from tftp to startup config)
  -v          verbose mode
  -w          very verbose mode
  --version   version inf.

DEVICE-LIST template:
-
 HOSTNAME: <hostname>
 IP : <ip>
 LOGIN: <login>
 SSH_PASS: <pass>
-
 HOSTNAME: <hostname>
 IP : <ip>
 LOGIN: <login>
 SSH_PASS: <pass>
-
 HOSTNAME: <hostname>
 IP : <ip>
 LOGIN: <login>
 SSH_PASS: <pass>
"""

import paramiko
import sys
import logging
import yaml
import multiprocessing
from docopt import docopt
from paramiko.ssh_exception import AuthenticationException


def main(docopt_args):

    def paramiko_mod(ip, cmd, login, sshpass, hostname, optext):

        try:
            sshobj = paramiko.SSHClient()
            sshobj.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            sshobj.connect(ip, username=login, password=sshpass, allow_agent=False,look_for_keys=False)
            stdin, stdout, stderr = sshobj.exec_command(cmd)
            out = ''.join(stdout)

            if 'Error' in out:
                print '==> Device ' + hostname + ' (' + ip + '):'
                print out

            filename = hostname + ".log"
            f = open(filename, 'w')
            for line in out:
                f.write(line)
            f.close()
            sshobj.close()
            logging.info('==> ' + optext + hostname + ' : IP ' + ip + ' done.')
            return filename, cmd
        except (AuthenticationException):
            print 'SSH Authentication failure to ' + ip
            sys.exit(1)


    # Main program

    TFTP_IP = docopt_args['TFTP']
    DEV_LIST = docopt_args['DEVICE-LIST']
    SCEN_DIR = docopt_args['SCENARIO']

    if docopt_args['--version']:
        print ' topconfig.py : version ' + __version__ + '   by AJ NOURI, ajn.bin@gmail.com'

    if docopt_args['-w']:
        logging.basicConfig(level=logging.DEBUG)
    elif docopt_args['-v']:
       logging.basicConfig(level=logging.INFO)


    # Prepare the command to run by SSH
    if docopt_args['-r'] and docopt_args['-b']:
        print ' Provide either -b (backup) or -r (reset), not both.'
        exit()
    elif docopt_args['-r']:
        PRECMD = 'copy tftp://' + TFTP_IP + '/' + SCEN_DIR + '/'
        POSTCMD = '.cfg startup-config'
        OPTEXT = 'Reset startup config '
    elif docopt_args['-b']:
        PRECMD = 'copy running-config tftp://' + TFTP_IP + '/' + SCEN_DIR + '/'
        POSTCMD = '.cfg'
        OPTEXT = 'Backup running config '
    else:
        print ' One option is required: -b (backup) or -r (reset)'
        exit()

    # Read device credentials
    try:
        stream = open(DEV_LIST, 'r')
        rdata = yaml.load(stream)
        #print(rdata)
    except IOError:
        print "Could not read file:", DEV_LIST
        sys.exit()


     # Back & Reset Operations
    task_list = []

    for router in rdata:
        CMD = PRECMD + router['HOSTNAME'] + POSTCMD
        #print CMD
        task = multiprocessing.Process(target=paramiko_mod, args=(router['IP'], CMD, router['LOGIN'], router['SSH_PASS'], router['HOSTNAME'], OPTEXT))
        task_list.append(task)
        task.start()

    for task in task_list:
        task.join()


if __name__ == '__main__':
    # parse arguments based on docstring
    args = docopt(__doc__)
    # Run the program with the validated args
    main(args)

// demo of github push